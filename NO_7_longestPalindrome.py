# !bin/bash/python3

'''
===============================================================
1.题目描述
给你一个字符串 s，找到 s 中最长的回文子串。
===============================================================
2.示例
输入：s = "babad"
输出："bab"
解释："aba" 同样是符合题意的答案。
===============================================================
3.算法：动态规划问题
动态规划问题通常用于求最优解问题
通常子问题重叠，且一个问题又可以分解成另一个子问题，可以递归进行
但与分治法不同的是，分治算法会反复求公共子问题
但是动态规划对每个子问题只求解一次，并将解保留在一个地方，避免了不必要的计算工作
================================================================
4.具体解法
一个序列是回文序列
那么它的S[i+1,j-1]的子序列一定仍然是回文序列
================================================================
2021.3.7 20：50
仿照标准答案

'''
class Solution:
    def longestPalindrome(self, s: str) -> str:
        length = len(s)
        dp = [[1] * length for _ in range(length)]
        left, right = 0, 0 #长度为1时
        for i in range(1, length):
             for j in range(length-i):
                if s[j] == s[j+i] and dp[j+1][j+i-1]:
                    dp[j][j+i] = 1 
                    left, right = j, j+i
                else:
                    dp[j][j+i] = 0
        return s[left: right+1]

